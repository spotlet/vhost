#!/bin/bash

NAME="Spotlet VHost"
NODE_BIN_DIR="/usr/local/bin"
NODE_PATH="/usr/local/lib/node_modules"
APPLICATION_PATH="/home/werle/.spotlet/vhost/index.js"
PIDFILE="/var/run/spotlet-vhost.pid"
LOGFILE="/var/log/spotlet-vhost.log"
MIN_UPTIME="5000"
SPIN_SLEEP_TIME="2000"
export DEBUG="spotlet*"

export PORT=5555
eval $(PREFIX=/home/spotlet spotlet-mount-env)

PATH=$NODE_BIN_DIR:$PATH
export NODE_PATH=$NODE_PATH

start () {
  echo "Starting $NAME"
    forever \
    --pidFile $PIDFILE \
    -a \
    -l $LOGFILE \
    --minUptime $MIN_UPTIME \
    --spinSleepTime $SPIN_SLEEP_TIME \
    start $APPLICATION_PATH 2>&1 > /dev/null &
    RETVAL=$?
}

stop () {
  if [ -f $PIDFILE ]; then
    echo "Shutting down $NAME"
# Tell Forever to stop the process.
      forever stop $APPLICATION_PATH 2>&1 > /dev/null
# Get rid of the pidfile, since Forever won't do that.
      rm -f $PIDFILE
      RETVAL=$?
  else
    echo "$NAME is not running."
      RETVAL=0
      fi
}

restart () {
  stop
  start
}

status() {
# On Ubuntu this isn't even necessary. To find out whether the service is
# running, use "service my-application status" which bypasses this script
# entirely provided you used the service utility to start the process.
#
# The commented line below is the obvious way of checking whether or not a
# process is currently running via Forever, but in recent Forever versions
# when the service is started during Chef provisioning a dead pipe is left
# behind somewhere and that causes an EPIPE exception to be thrown.
# forever list | grep -q "$APPLICATION_PATH"
#
# So instead we add an extra layer of indirection with this to bypass that
# issue.
  echo `forever list` | grep -q "$APPLICATION_PATH"
    if [ "$?" -eq "0" ]; then
      echo "$NAME is running."
        RETVAL=0
    else
      echo "$NAME is not running."
        RETVAL=3
        fi
}

case "$1" in
start)
start
;;
stop)
stop
;;
status)
status
;;
restart)
restart
;;
*)
echo "Usage: {start|stop|status|restart}"
exit 1
;;
esac
exit $RETVAL
